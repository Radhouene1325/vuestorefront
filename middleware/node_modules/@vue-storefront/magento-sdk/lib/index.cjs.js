'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sdkAxiosRequestSender = require('@vue-storefront/sdk-axios-request-sender');
var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

class SdkContext extends Map {
    get(key) {
        return super.get(key);
    }
    set(key, value) {
        super.set(key, value);
        return this;
    }
}
/**
 * Map containing SDK module configuration values
 */
const sdkContext = new SdkContext();

/**
 * Resolve base URL based on the client-side or server-side environment.
 * Fallbacks to `apiUrl` when there is no `ssrApiUrl` on server-side environment,
 * bacause `ssrApiUrl` is optional.
 */
const resolveBaseUrl = () => {
    const apiUrl = sdkContext.get('apiUrl');
    const ssrApiUrl = sdkContext.get('ssrApiUrl');
    return typeof window === 'undefined' ? ssrApiUrl || apiUrl : apiUrl;
};

const client = new Proxy(axios__default["default"].create(), {
    get: (axiosInstance, property) => {
        axiosInstance.defaults.withCredentials = true;
        axiosInstance.defaults.baseURL = resolveBaseUrl();
        return axiosInstance[property];
    },
});

/**
 * Method to apply coupon to cart
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/applyCouponToCart | applyCouponToCart} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/applyCouponToCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ApplyCouponToCartResponse | ApplyCouponToCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // apply coupon parameters
 * const params = {
 *  cart_id: 'test-cart-id',
 *  coupon_code: 'test-coupon-code'
 * };
 *
 * // The result of the coupon application
 * const result = await sdk.magento.applyCouponToCart(params);
 * ```
 *
 * @example
 * Creating a custom GraphQL query for getting cart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'apply-coupon-to-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation applyCouponToCart($input: ApplyCouponToCartInput) {
 *                applyCouponToCart(input: $input) {
 *                  ${metadata.fields}
 *                }
 *              }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch reduced amount of data
 *
 * ```ts
 *  import { sdk } from '~/sdk.config.ts';
 *  const customQuery = {
 *    applyCouponToCart: 'apply-coupon-to-cart-custom-query',
 *      metadata: {
 *        fields: 'cart { applied_coupons { code } }'
 *      }
 *    };
 *
 *  const params = {
 *    cart_id: 'test-cart-id',
 *    coupon_code: 'test-coupon-code'
 *  };
 *
 *  // The result will contain only fields configured in the custom query
 *  const result = await sdk.magento.applyCouponToCart(params, { customQuery });
 * ```
 */
async function applyCouponToCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('applyCouponToCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get products details
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productDetails | productDetails} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productDetailsQuery | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductDetailsResponse | ProductDetailsResponse}.
 *
 * @example
 * Simple usage without filters, sorting or pagination:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of products with default parameters
 * const details = await sdk.magento.productDetails({});
 * ```
 *
 * @example
 * Usage with filters, sorting and pagination:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // make a request to fetch list of products with custom parameters
 * const details = await sdk.magento.productDetails({
 *  pageSize: 20,
 *  currentPage: 1,
 *  filter: {
 *    sku: {
 *      eq: PRODUCT_SKU
 *    }
 *  }
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for adding product details.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'product-details-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query productDetails(
 *                $search: String = "",
 *                $filter: ProductAttributeFilterInput,
 *                $pageSize: Int = 10,
 *                $currentPage: Int = 1,
 *                $sort: ProductAttributeSortInput
 *              ) {
 *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch product details.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *  productDetails: 'product-details-custom-query',
 *    metadata: {
 *      fields: 'items { sku name }'
 *    }
 * };
 *
 * const details = await sdk.magento.productDetails({
 *  filter: {
 *    sku: {
 *      eq: 'some-sku' // optional SKU filter
 *    }
 *  }
 * }, { customQuery });
 *
 * // Details will contain only the fields specified in the custom query.
 * ```
 */
async function productDetails(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('productDetails')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to list of all categories matching specified filters
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categories | categories} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categories | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categoriesResponse | categoriesResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of categories with default parameters
 * const categories = await sdk.magento.categories({});
 * ```
 *
 * @example
 * Creating a custom GraphQL query for fetching categories.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'categories-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query categories {
 *                 categories {
 *                   ${metadata.fields}
 *                 }
 *               }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch categories.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *  categories: 'categories-custom-query',
 *    metadata: {
 *      fields: 'items { uid name }'
 *    }
 * };
 *
 * const categories = await sdk.magento.categories({}, { customQuery });
 *
 * // Category list will contain only the fields specified in the custom query.
 * ```
 */
async function categories(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('categories')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to list of all categories without filters
 * @deprecated Use `categories` method instead
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categoryList | categoryList} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categoryList | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CategoryListResponse | CategoryListResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of categories with default parameters
 * const categoryList = await sdk.magento.categoryList({});
 * ```
 *
 * @example
 * Creating a custom GraphQL query for adding product details.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'category-list-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query categoryList {
 *                 categories {
 *                   ${metadata.fields}
 *                 }
 *               }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch product details.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *  categoryList: 'category-list-custom-query',
 *    metadata: {
 *      fields: 'items { uid name }'
 *    }
 * };
 *
 * const categoryList = await sdk.magento.categoryList({}, { customQuery });
 *
 * // Category list will contain only the fields specified in the custom query.
 * ```
 */
async function categoryList(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('categoryList')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to search categories
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categorySearch | categorySearch} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categorySearchQuery | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CategorySearchResponse | CategorySearchResponse}.
 *
 * @example
 * Simple usage without filters
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of categories with default parameters
 * const categories = await sdk.magento.categorySearch();
 * ```
 *
 * @example
 * Usage with filters
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // make a request to fetch list of categories with custom parameters
 * const details = await sdk.magento.categorySearch({
 *  filters: {
 *    category_uid: {
 *      in: ['MjA=']
 *    }
 *  }
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for searching categories
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'category-search-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
                query categorySearch($filters: CategoryFilterInput) {
                  categoryList(filters: $filters) {
                    ${metadata.fields}
                  }
                }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to search categories.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *    categorySearch: 'category-search-custom-query',
 *    metadata: {
 *      fields: 'children_count products { total_count }'
 *    }
 * };
 *
 * const result = await sdk.magento.categorySearch({
 *  filter: {
 *    category_uid: {
 *      in: ['=MjA']
 *    }
 *  }
 * }, { customQuery });
 *
 * // Details will contain only the fields specified in the custom query.
 * ```
 */
async function categorySearch(
// eslint-disable-next-line default-param-last
params = {}, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('categorySearch')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get products
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/products | products} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link @vue-storefront/magento-types#productsListQuery | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductsListResponse | ProductsListResponse}.
 *
 * @example
 * Simple usage without filters, sorting or pagination:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of products with default parameters
 * const details = await sdk.magento.products({});
 * ```
 *
 * @example
 * Usage with filters, sorting and pagination:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // make a request to fetch list of products with custom parameters
 * const details = await sdk.magento.products({
 *  pageSize: 20,
 *  currentPage: 1,
 *  filter: {
 *    sku: {
 *      eq: PRODUCT_SKU
 *    }
 *  }
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for fetching products.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'products-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query productsList(
 *                $search: String = "",
 *                $filter: ProductAttributeFilterInput,
 *                $pageSize: Int = 10,
 *                $currentPage: Int = 1,
 *                $sort: ProductAttributeSortInput
 *              ) {
 *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch products list.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *  products: 'products-custom-query',
 *    metadata: {
 *      fields: 'items { sku name }'
 *    }
 * };
 *
 * const products = await sdk.magento.products({
 *  filter: {
 *    sku: {
 *      eq: 'some-sku' // optional SKU filter
 *    }
 *  }
 * }, { customQuery });
 *
 * // Products will contain only the fields specified in the custom query.
 * ```
 */
async function products(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('products')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get related products
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/relatedProduct | relatedProduct} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/relatedProduct | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RelatedProductsResponse | RelatedProductsResponse}.
 *
 * @example
 * Simple usage without filters, sorting or pagination:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Fetch list of products filtered by the SKU
 * // Only the parent product is affected by filters
 * const products = await sdk.magento.relatedProduct({
 *  pageSize: 1,
 *  filter: {
 *    sku: {
 *      eq: PRODUCT_SKU
 *    }
 *  }
 * });
 * ```
 *
 * @example
 * Usage with filters, sorting and pagination:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // make a request to fetch list of products with custom parameters
 * const products = await sdk.magento.relatedProduct({
 *  pageSize: 20,
 *  currentPage: 1,
 *  filter: {
 *    sku: {
 *      eq: PRODUCT_SKU
 *    }
 *  }
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query getting related products.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'related-product-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query relatedProduct(
 *                $search: String = "",
 *                $filter: ProductAttributeFilterInput,
 *                $pageSize: Int = 10,
 *                $currentPage: Int = 1,
 *                $sort: ProductAttributeSortInput
 *              ) {
 *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch related products.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *  relatedProduct: 'related-product-custom-query',
 *    metadata: {
 *      fields: 'items { related_products { uid __typename } }'
 *    }
 * };
 *
 * const result = await sdk.magento.relatedProduct({
 *  filter: {
 *    sku: {
 *      eq: 'some-sku' // optional SKU filter
 *    }
 *  }
 * }, { customQuery });
 *
 * // Result will contain only the fields specified in the custom query.
 * ```
 */
async function relatedProducts(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('relatedProducts')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get upsell products for a given product.
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/upsellProducts | upsellProducts} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/upsellProductQuery | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpsellProductsResponse | UpsellProductsResponse}.
 *
 * @example
 * Simple usage without filters, sorting or pagination:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of upsell-products with default parameters
 * const upsellProducts = await sdk.magento.upsellProducts({});
 * ```
 *
 * @example
 * Usage with filters, sorting and pagination:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // make a request to fetch list of products with upsell products
 * const upsellProducts = await sdk.magento.upsellProducts({
 *  pageSize: 20,
 *  currentPage: 1,
 *  filter: {
 *    sku: {
 *      eq: PRODUCT_SKU
 *    }
 *  }
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for getting upsellProducts.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'upsell-products-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query upsellProducts(
 *                $search: String = "",
 *                $filter: ProductAttributeFilterInput,
 *                $pageSize: Int = 10,
 *                $currentPage: Int = 1,
 *                $sort: ProductAttributeSortInput
 *              ) {
 *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch upsell-products.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *  upsellProducts: 'upsell-products-custom-query',
 *    metadata: {
 *      fields: 'items { sku name upsell_products { sku } }'
 *    }
 * };
 *
 * const upsellProducts = await sdk.magento.upsellProducts({
 *  filter: {
 *    sku: {
 *      eq: 'some-sku' // optional SKU filter
 *    }
 *  }
 * }, { customQuery });
 *
 * // upsellProducts will contain only the fields specified in the custom query.
 * ```
 */
async function upsellProducts(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('upsellProducts')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to add products to wishlist
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductToWishList | addProductToWishList} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductToWishListQuery | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AddProductToWishListResponse}.
 *
 * @example
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const wishlist = await sdk.magento.addProductToWishList({
 *   // Wishlist ID
 *   id: '258',
 *   // Products to add to wishlist with given ID
 *   items: [{quantity: 1, sku: 'WSH12'}]
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for searching categories
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'add-product-to-wishlist-custom-query': ({ variables, metadata }) => ({
 *           variables,
 *           query: `
 *             mutation addProductsToWishlist($id: ID!, $items: [WishlistItemInput!]!) {
 *               addProductsToWishlist(wishlistId: $id, wishlistItems: $items) {
 *                 wishlist {
 *                   ${metadata.fields}
 *                 }
 *               }
 *             }`
 *         }),
 *       },
 *     }
 *   }
 * }
 * ```
 *
 * @example
 * Using a custom GraphQL query (mutation) to add products to wishlist
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * const customQuery = {
 *    addProductsToWishList: 'add-product-to-wishlist-custom-query',
 *    metadata: {
 *      fields: 'id items_count'
 *    }
 * };
 *
 * const result = await sdk.magento.addProductToWishList({
 *  id: '258',
 *  items: [{ quantity: 1, sku: '258'}]
 * }, { customQuery });
 *
 * // Returned wishlist will contain only the fields specified in the custom query.
 * ```
 */
async function addProductToWishList(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('addProductToWishList')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get cart
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cart | cart} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CartResponse | CartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch cart with default parameters
 * const cart = await sdk.magento.cart({ cartId: '123' });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for getting cart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query cart($cartId: String!) {
 *                cart(cart_id:$cartId) {
 *                  ${metadata.fields}
 *                }
 *              }`
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch cart
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   cart: 'cart-custom-query',
 *   metadata: {
 *     fields: 'id items { uid }'
 *   }
 * };
 *
 * const cart = await sdk.magento.cart({ cartId: '123'}, { customQuery });
 *
 * // Cart will contain only the fields specified in the custom query.
 * ```
 */
async function cart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('cart')
        .setMethod('POST')
        .setProps([params.cartId, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to resolve cart total quantity
 * This method is optimized to fetch only total quantity of the cart and not the whole cart object.
 * Do not use `cart` query inf you want to fetch only total quantity of the cart.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cartTotalQty | cartTotalQty } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cartTotalQty | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CartTotalQtyResponse | CartTotalQtyResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch total quantity of the cart
 * const { data } await sdk.magento.cartTotalQty({cartId: 'some_cart_id' });
 *
 * // total quantity of the cart available in data.cart.total_quantity
 * ```
 */
async function cartTotalQty(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('cartTotalQty')
        .setMethod('POST')
        .setProps([params.cartId, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to set the guest user email on the cart
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setGuestEmailOnCart | setGuestEmailOnCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setGuestEmailOnCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetGuestEmailOnCartResponse | SetGuestEmailOnCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // set an email on the cart
 * const result = await sdk.magento.setGuestEmailOnCart({ cart_id: 'some-cart-id', email: 'some-email' });
 *
 * // new email will be set on the cart
 * // data.setGuestEmailOnCart.cart.email will contain the email address
 * ```
 */
async function setGuestEmailOnCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('setGuestEmailOnCart')
        .setMethod('POST')
        .setProps([params, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to create an empty cart.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createEmptyCart | createEmptyCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createEmptyCart | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateEmptyCartResponse | CreateEmptyCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // create an empty cart
 * const cart = await sdk.magento.createEmptyCart();
 *
 * // cart id can be accessed from the response
 * const cartId = cart.data.createEmptyCart;
 * ```
 */
async function createEmptyCart(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('createEmptyCart')
        .setMethod('POST')
        .setProps([options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to set shipping addresses on the cart
 * It should be used to set single or multiple shipping addresses on the cart.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingAddressOnCart | setShippingAddressOnCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingAddressOnCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetShippingAddressesOnCartResponse | SetShippingAddressesOnCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Prepare parameters
 * const params = {
 *   cart_id: 'some-cart-id',
 *   shipping_addresses: [
 *     {
 *       address: {
 *        firstname: 'John',
 *        lastname: 'Doe',
 *        city: 'New York',
 *        country_code: 'US',
 *        street: ['Street 1', 'Street 2'],
 *        telephone: '123 123 123',
 *        region: 'AL',
 *        postcode: '10001',
 *        save_in_address_book: false
 *       },
 *     }
 *   ]
 * };
 *
 * // Set shipping address on the cart
 * await sdk.magento.setShippingAddressesOnCart(params);
 * ```
 * @example
 * You can also use the `setShippingAddressesOnCart` method to set multiple shipping addresses on the cart.
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Prepare parameters
 * const params = {
 *  cart_id: 'some-cart-id',
 *  shipping_addresses: [
 *   {
 *     address: address1, // address1 is an object with address details
 *   },
 *   {
 *     address: address2, // address2 is an object with address details
 *   }
 * ];
 *
 * // This will set address1 and address2 on the cart
 * await sdk.magento.setShippingAddressesOnCart(params);
 * ```
 *
 *
 * @example
 * Creating a custom GraphQL query for reducing the amount of fields returned by the query, when compared to the default query.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'set-shipping-addresses-on-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation setShippingAddressesOnCart($input: SetShippingAddressesOnCartInput) {
 *                setShippingAddressesOnCart(input: $input) {
 *                cart {
 *                  ${metadata.fields}
 *                }
 *              }
 *            }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   cart: 'set-shipping-addresses-on-cart-custom-query',
 *   metadata: {
 *     fields: 'shipping_addresses { city }'
 *   }
 * };
 *
 * // data will contain only the fields specified in the custom query.
 * const { data } = await sdk.magento.setShippingAddressesOnCart(params, { customQuery });
 * ```
 */
async function setShippingAddressesOnCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('setShippingAddressesOnCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to remove coupon from cart
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeCouponFromCart | removeCouponFromCart} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeCouponFromCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RemoveCouponFromCartResponse | RemoveCouponFromCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // assuming that the coupon code is already applied to the cart
 * const params = {
 *  cart_id: 'test-cart-id',
 * };
 *
 * // Remove coupon from cart
 * const result = await sdk.magento.removeCouponFromCart(params);
 * ```
 *
 * @example
 * Creating a custom GraphQL query for getting cart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'remove-coupon-from-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation removeCouponFromCart($input: RemoveCouponFromCartInput) {
 *                removeCouponFromCart(input: $input) {
 *                  ${metadata.fields}
 *                }
 *              }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch reduced amount of data
 *
 * ```ts
 *  import { sdk } from '~/sdk.config.ts';
 *
 *  const customQuery = {
 *    removeCouponFromCart: 'remove-coupon-from-cart-custom-query',
 *      metadata: {
 *        fields: 'cart { applied_coupons { code } }'
 *      }
 *    };
 *
 *  // The only required parameter is cart_id
 *  const params = {
 *    cart_id: 'test-cart-id',
 *  };
 *
 *  // The result will contain only fields configured in the custom query
 *  const result = await sdk.magento.removeCouponFromCart(params, { customQuery });
 * ```
 */
async function removeCouponFromCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('removeCouponFromCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to add products to cart (returns cart)
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductsToCart | addProductsToCart} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductsToCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AddProductsToCartResponse | AddProductsToCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // add products to cart with default parameters (returns cart)
 * const cart = await sdk.magento.addProductsToCart(
 *   {
 *     cartId: '123',
 *     cartItems: [
 *       {
 *         sku: 'WSH12',
 *         quantity: 1,
 *         selected_options: [
 *           // option IDs retrieved from product
 *           'Y29uZmlndXJhYmxlLzkzLzUz',
 *           'Y29uZmlndXJhYmxlLzE0NC8xNzE='
 *         ]
 *       }
 *     ]
 *   }
 * );
 * ```
 *
 * @example
 * Creating a custom GraphQL query for adding products to cart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'add-products-to-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation addProductsToCart($cartId: String!, $cartItems: [CartItemInput!]!) {
 *                addProductsToCart(cartId: $cartId, cartItems: $cartItems) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }`
 *
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   cart: 'add-products-to-cart-custom-query',
 *   metadata: {
 *     fields: 'id items { uid }'
 *   }
 * };
 *
 *
 * const cart = await sdk.magento.addProductsToCart(
 *   {
 *     cartId: '123',
 *     cartItems: [
 *       {
 *         sku: 'WSH12',
 *         quantity: 1,
 *         selected_options: [
 *           'Y29uZmlndXJhYmxlLzkzLzUz',
 *           'Y29uZmlndXJhYmxlLzE0NC8xNzE='
 *         ]
 *       }
 *     ]
 *   },
 *   { customQuery }
 * );
 *
 * // Result will contain only the fields specified in the custom query.
 * ```
 */
async function addProductsToCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('addProductsToCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to add configurable products to cart (returns cart)
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addConfigurableProductsToCart | addConfigurableProductsToCart} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addConfigurableProductsToCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AddProductsToCartResponse | AddProductsToCartResponse}.
 *
 * @example
 * Adding configurable products to cart with default parameters.
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const cart = await sdk.magento.addConfigurableProductsToCart(
 *   {
 *     cart_id: '123',
 *     cart_items: [
 *       {
 *        data: {
 *          quantity: 1,
 *          sku: 'MH01-XS-Black',
 *        },
 *        parent_sku: 'MH01',
 *        customizable_options: [],
 *       }
 *     ]
 *   }
 * );
 * ```
 *
 * @example
 * Creating a custom GraphQL query for adding configurable products to cart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'add-configurable-products-to-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation addConfigurableProductsToCart($input: AddConfigurableProductsToCartInput) {
 *                addConfigurableProductsToCart(input: $input) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }`,
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   cart: 'add-configurable-products-to-cart-custom-query',
 *   metadata: {
 *     fields: 'id items { uid }'
 *   }
 * };
 *
 *
 * const cart = await sdk.magento.addConfigurableProductsToCart(
 *   {
 *     cart_id: '123',
 *     cart_items: [
 *       {
 *        data: {
 *          quantity: 1,
 *          sku: 'MH01-XS-Black',
 *        },
 *        parent_sku: 'MH01',
 *        customizable_options: [],
 *       }
 *     ]
 *   },
 *   { customQuery }
 * );
 *
 * // Result will contain only the fields specified in the custom query.
 * ```
 */
async function addConfigurableProductsToCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('addConfigurableProductsToCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to add bundle products to cart (returns cart)
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addBundleProductsToCart | addBundleProductsToCart} endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addBundleProductsToCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AddProductsToCartResponse | AddProductsToCartResponse}.
 *
 * @example
 * Adding bundle products to cart with default parameters.
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const cart = await sdk.magento.addBundleProductsToCart(
 *   {
 *     cart_id: '123',
 *     cart_items: [
 *      {
 *        data: {
 *          quantity: 1,
 *          sku: TEST_BUNDLE_SKU,
 *        },
 *        bundle_options: [
 *          {
 *            id: 1,
 *            quantity: 1,
 *            value: ['1'],
 *          },
 *          {
 *            id: 2,
 *            quantity: 1,
 *            value: ['4'],
 *          },
 *          {
 *            id: 3,
 *            quantity: 1,
 *            value: ['5'],
 *          },
 *          {
 *            id: 4,
 *            quantity: 1,
 *            value: ['8'],
 *          },
 *     ]
 *   }
 * );
 * ```
 *
 * @example
 * Creating a custom GraphQL query for adding bundle products to cart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'add-bundle-products-to-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation addBundleProductsToCart($input: AddBundleProductsToCartInput) {
 *                addBundleProductsToCart(input: $input) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }`,
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   cart: 'add-bundle-products-to-cart-custom-query',
 *   metadata: {
 *     fields: 'id items { uid }'
 *   }
 * };
 *
 *
 * const cart = await sdk.magento.addBundleProductsToCart(
 *   {
 *    // use the payload from the previous example
 *   }, { customQuery }
 * );
 *
 * // Result will contain only the fields specified in the custom query.
 * ```
 */
async function addBundleProductsToCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('addBundleProductsToCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to set billing address on the cart
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setBillingAddressOnCart | setBillingAddressOnCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setBillingAddressOnCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetBillingAddressOnCartResponse | SetBillingAddressOnCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Prepare parameters
 * const params = {
 *   cart_id: 'some-cart-id',
 *   billing_address: {
 *       address: {
 *        firstname: 'John',
 *        lastname: 'Doe',
 *        city: 'New York',
 *        country_code: 'US',
 *        street: ['Street 1', 'Street 2'],
 *        telephone: '123 123 123',
 *        region: 'AL',
 *        postcode: '10001',
 *        save_in_address_book: false
 *       },
 *     }
 * };
 *
 * // Set shipping address on the cart
 * await sdk.magento.setBillingAddressOnCart(params);
 * ```

 * @example
 * Creating a custom GraphQL query for reducing the amount of fields returned by the query, when compared to the default query.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'set-billing-address-on-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation setBillingAddressOnCart($input: SetBillingAddressOnCartInput) {
 *                setBillingAddressOnCart(input: $input) {
 *                cart {
 *                  ${metadata.fields}
 *                }
 *              }
 *            }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   setBillingAddressOnCart: 'set-billing-address-on-cart-custom-query',
 *   metadata: {
 *     fields: 'billing_address { city }'
 *   }
 * };
 *
 * // data will contain only the fields specified in the custom query.
 * const { data } = await sdk.magento.setBillingAddressOnCart(params, { customQuery });
 * ```
 */
async function setBillingAddressOnCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('setBillingAddressOnCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to set shipping methods on cart.
 * Before using this method, you need to set shipping address on cart.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingMethodsOnCart | setShippingMethodsOnCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingMethodsOnCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetShippingMethodsOnCartResponse | SetShippingMethodsOnCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Assuming that shipping address is already set on cart.
 * // if not, you need to set shipping address on cart first.
 *
 * const params = {
 *   cart_id: 'some-cart-id',
 *   shipping_methods: [
 *     {
 *       carrier_code: 'flatrate',
 *       method_code: 'flatrate'
 *     }
 *   ]
 * };
 *
 * const { data } = await sdk.magento.setShippingMethodsOnCart(params);
 *
 * // you can get set shipping methods on cart response from
 * // data?.setShippingMethodsOnCart?.cart?.shipping_addresses?.[0]?.selected_shipping_method?.method_code
 * ```
 *
 * @example
 * Creating a custom GraphQL query to change the amount of fields returned by the query, when compared to the default query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'set-shipping-methods-on-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation setShippingMethodsOnCart($input: SetShippingMethodsOnCartInput) {
 *                setShippingMethodsOnCart(input: $input) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * // you will get only selected_shipping_method.method_code field
 *
 * const customQuery = {
 *   setShippingMethodsOnCart: 'set-shipping-methods-on-cart-custom-query',
 *   metadata: {
 *     fields: 'shipping_addresses { selected_shipping_method { method_code } }'
 *   }
 * };
 *
 * const params = {
 *   cart_id: 'some-cart-id',
 *   shipping_methods: [
 *     {
 *       carrier_code: 'flatrate',
 *       method_code: 'flatrate'
 *     }
 *   ]
 * };
 *
 * const { data } = await sdk.magento.setShippingMethodsOnCart(params, { customQuery });
 *
 * // data will contain only the fields specified in the custom query.
 * ```
 */
async function setShippingMethodsOnCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('setShippingMethodsOnCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to remove item from cart.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeItemFromCart | removeItemFromCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeItemFromCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RemoveItemFromCartResponse | RemoveItemFromCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Assumes that the cart has an item with the UID 'MY='.
 * // Configure method parameters
 * const params = { cart_id: TEST_CART_ID, cart_item_uid: 'MY=' }
 *
 * const result = await sdk.magento.removeItemFromCart(params);
 *
 * // result will contain the updated cart.
 * // you can look at the cart items to see that the item with the UID 'MY=' has been removed.
 * const hasItem = result.data?.removeItemFromCart!.cart!.items!.find(item => item!.uid === 'MY=');
 * ```
 *
 * @example
 * Creating a custom GraphQL query for manipulating the cart response data.
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'remove-item-from-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation removeItemFromCart($input: RemoveItemFromCartInput) {
 *                removeItemFromCart(input: $input) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }`
 *          }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * // this will reduce the amount of data transferred from the server to the client.
 *
 * // All we need is the cart ID and the email address of the customer.
 * const customQuery = {
 *   cart: 'remove-item-from-cart-custom-query',
 *   metadata: {
 *     fields: 'id email'
 *   }
 * };
 *
 * // Assumes that the cart has an item with the UID 'MY='.
 * // Uses params from the previous example and the custom query.
 * const result = await sdk.magento.removeItemFromCart(params, { customQuery });
 *
 * // result will contain only the fields specified in the custom query.
 * ```
 */
async function removeItemFromCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('removeItemFromCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to set payment method on cart.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setPaymentMethodOnCart | setPaymentMethodOnCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setPaymentMethodOnCart | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetPaymentMethodOnCartResponse | SetPaymentMethodOnCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const params = {
 *   cart_id: 'some-cart-id'
 *   payment_method: {
 *     code: 'checkmo'
 *   }
 * };
 *
 * // sets payment method on cart and return payment information
 * // data contains properties like `available_payment_methods` and `selected_payment_method`
 * const { data } = await sdk.magento.setPaymentMethodOnCart(params);
 * ```
 *
 * @example
 * Creating a custom GraphQL query for configuring the response data structure
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'set-payment-method-on-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation setPaymentMethodOnCart($input: SetPaymentMethodOnCartInput) {
 *                setPaymentMethodOnCart(input: $input) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created with the `set-payment-method-on-cart-custom-query` in the previous example
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   setPaymentMethodOnCart: 'set-payment-method-on-cart-custom-query',
 *   metadata: {
 *     fields: 'available_payment_methods { code title }'
 *   }
 * };
 *
 * // Params and options are the same as in the previous example
 * const { data } = await sdk.magento.setPaymentMethodOnCart(params, { customQuery });
 *
 * // data contains only the properties selected in the custom query
 * ```
 */
async function setPaymentMethodOnCart(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('setPaymentMethodOnCart')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to merge carts
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/mergeCarts | mergeCarts } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/mergeCarts | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/MergeCartsResponse | MergeCartsResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const params = {
 *   sourceCartId: 'pCS0ykep1l3wGlPKSyWLJq5fb1DxIQcp',
 *   // this cart needs to have been created by a logged in user
 *   destinationCartId: 'xiYYh2ep0l3xGtPsz2WLJf5f31DxBJx0'
 * }
 *
 * // merge carts and return the result (cart)
 * const mergedCart = await sdk.magento.mergeCarts(params);
 * ```
 *
 * @example
 * Creating a custom GraphQL query for merging carts
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'merge-carts-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation mergeCarts($sourceCartId: String!, $destinationCartId: String!) {
 *                mergeCarts(source_cart_id: $sourceCartId, destination_cart_id: $destinationCartId) {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to merge carts
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   cart: 'merge-carts-custom-query',
 *   metadata: {
 *     fields: 'id items { product { name } }'
 *   }
 * };
 *
 * const params = {
 *   sourceCartId: 'pCS0ykep1l3wGlPKSyWLJq5fb1DxIQcp',
 *   destinationCartId: 'xiYYh2ep0l3xGtPsz2WLJf5f31DxBJx0'
 * }
 * const mergedCart = await sdk.magento.mergeCarts(params, { customQuery });
 *
 * // Merged cart will contain only the fields specified in the custom query.
 * ```
 */
async function mergeCarts(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('mergeCarts')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to update items in the cart
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCartItems | updateCartItems } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCartItems | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCartItemsResponse | UpdateCartItemsResponse}.
 *
 * @example
 * Simple usage, updating the quantity of a cart item:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // update the quantity of a cart item
 * const result = await sdk.magento.updateCartItems({
 *  cart_id: 'some-cart-id'
 *  cart_items: [{
 *      cart_item_uid: 'MY=',
 *      quantity: 10 // update the quantity to 10
 *     }]
 * });
 *
 * // result will contain the updated cart.
 * ```
 *
 * @example
 * Creating a custom GraphQL query for manipulating the cart response data.
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'update-cart-items-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation updateCartItems($input: UpdateCartItemsInput) {
 *                updateCartItems(input: $input) {
 *                  cart {
 *                    ${metadata.fields}
 *                  }
 *                 }
 *              }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example.
 * Note that the custom query must be passed to the `customQuery` property of the `options` parameter.
 * The `metadata` property of the `options` parameter can be used to pass additional data to the custom query.
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   updateCartItems: 'update-cart-items-custom-query',
 *   metadata: {
 *     fields: 'id items { uid quantity product { uid sku }}'
 *   }
 * };
 *
 * // update the quantity of a cart item with params and custom query
 * // Params are the same as in the previous example.
 * const result = await sdk.magento.updateCartItems(params, { customQuery });
 * ```
 */
async function updateCartItems(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('updateCartItems')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to create a new customer.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomer | createCustomer } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomer | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateCustomerResponse | CreateCustomerResponse}.
 *
 * @example
 * Simple usage with basic customer data:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const params = {
 *   email: 'john.doe@gmail.com'
 *   firstname: 'John',
 *   lastname: 'Doe',
 * }
 *
 * const result = await sdk.magento.createCustomer(params);
 * ```
 @example
 * Creating a custom GraphQL query for creating a customer
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'create-customer-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query customer {
 *                customer {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch customer
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 *
 * const customQuery = {
 *   customer: 'create customer-custom-query',
 *   metadata: {
 *     fields: 'email firstname lastname'
 *   }
 * };
 *
 * const params = {
 *   email: 'john.doe@gmail.com'
 *   firstname: 'John',
 *   lastname: 'Doe',
 * }
 *
 * const result = await sdk.magento.createCustomer(params, { customQuery }
 *
 * // result will contain only the fields specified in the custom query.
 * ```
 */
async function createCustomer(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('createCustomer')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get current customer information
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customer | customer } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customer | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomerResponse | CustomerResponse}.
 *
 * @example
 * The `customer()` returns the currently active user.
 * This means that the request needs to contain an authorization token, which will tell Magento whose customer data should be fetched.
 *
 * If your browser has a VSF customer cookie saved, you can just call `customer()` without any parameters - the token will be attached automatically on every request to the middleware.
 *
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch customer
 * const customer = await sdk.magento.customer();
 * ```
 *
 * @example
 * If you're calling `customer()` in a non-browser context (for example in integration tests) where it's not possible to save a cookie,
 * you can attach the token manually using `customHeaders`
 *
 * Usage with manual authorization:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const token = '123'
 * const customHeaders = { Authorization: `Bearer {token}` }
 *
 * // fetch customer
 * const customer = await sdk.magento.customer({ customHeaders });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for fetching customer
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'customer-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query customer {
 *                customer {
 *                  ${metadata.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch customer
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   customer: 'customer-custom-query',
 *   metadata: {
 *     fields: 'email firstname lastname'
 *   }
 * };
 *
 * const customer = await sdk.magento.customer({ customQuery });
 *
 * // customer will contain only the fields specified in the custom query.
 * ```
 */
async function customer(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('customer')
        .setMethod('POST')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to change customer password.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/changeCustomerPassword | changeCustomerPassword } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/changeCustomerPassword | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ChangeCustomerPasswordResponse | ChangeCustomerPasswordResponse}.
 *
 * @example
 * Simple usage, change customer password:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const result = await sdk.magento.changeCustomerPassword({
 *  currentPassword: 'currentPassword',
 *  newPassword: 'newPassword'
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for changeCustomerPassword:
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'change-customer-password-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation changeCustomerPassword($currentPassword: String!, $newPassword: String!) {
 *               changeCustomerPassword(
 *                 currentPassword: $currentPassword
 *                 newPassword: $newPassword
 *               ) {
 *                 ${metadata.fields}
 *               }
 *             }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to narrow down the response data:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   changeCustomerPassword: 'change-customer-password-custom-query',
 *   metadata: {
 *     fields: 'email'
 *   }
 * };
 *
 * const result = await sdk.magento.changeCustomerPassword({
 *  currentPassword: 'currentPassword',
 *  newPassword: 'newPassword'
 * }, { customQuery });
 * ```
 */
async function changeCustomerPassword(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('changeCustomerPassword')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to generate customer token
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/generateCustomerToken | generateCustomerToken } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/generateCustomerToken | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GenerateCustomerTokenResponse | GenerateCustomerTokenResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch token
 * const result = await sdk.magento.generateCustomerToken({
 *   email: 'some-email',
 *   password: 'some-password'
 * });
 *
 * // Token is now available in result.data.generateCustomerToken.token
 * ```
 *
 *  * @example
 * Creating a custom GraphQL query to fetch additional data:
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'generate-customer-token-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation generateCustomerToken($email: String!, $password: String!) {
 *                generateCustomerToken(email: $email, password: $password) {
 *                  ${metadata.fields}
 *                }
 *              }
 *            }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   route: 'generate-customer-token-custom-query',
 *   metadata: {
 *     fields: 'token additional_field'
 *   }
 * };
 *
 * // data will contain only the fields specified in the custom query.
 * const result = await sdk.magento.generateCustomerToken({
 *   email: 'some-email',
 *   password: 'some-password'
 * }, { customQuery });
 * ```
 */
async function generateCustomerToken(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('generateCustomerToken')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch customer cart
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customerCart | customerCart } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customerCart | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomerCartResponse | CustomerCartResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch customer cart
 * const { data } = await sdk.magento.customerCart();
 *
 * // data contains cart details
 * const email = data?.customerCart?.email;
 *
 * ```
 *
 * @example
 * Creating a custom GraphQL query for customerCart
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'customer-cart-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query customerCart {
 *                customerCart {
 *                  ${metadata.fields}
 *                }
 *              }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of fields returned by the query, when compared to the default query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   customerCart: 'customer-cart-custom-query',
 *   metadata: {
 *     fields: 'id email items { id sku }
 *   }
 * };
 *
 * const result = await sdk.magento.customerCart({ customQuery });
 *
 * // result contains cart details with only the fields specified in the custom query
 * ```
 */
async function customerCart(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('customerCart')
        .setMethod('POST')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to revoke customer token.
 * It is used to log out the current customer.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/revokeCustomerToken | revokeCustomerToken } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/revokeCustomerToken | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RevokeCustomerTokenResponse | RevokeCustomerTokenResponse}.
 *
 * @example
 * Simple usage if the customer is logged in and the token is valid:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // token will be invalidated and the customer will be logged out
 * await sdk.magento.revokeCustomerToken();
 * ```
 */
async function revokeCustomerToken(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('revokeCustomerToken')
        .setMethod('POST')
        .setProps([options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to request password reset email
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/requestPasswordResetEmail | requestPasswordResetEmail } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/requestPasswordResetEmail | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RequestPasswordResetEmailResponse | RequestPasswordResetEmailResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // trigger sending of password reset email
 * const result = await sdk.magento.requestPasswordResetEmail({ email: 'john.doe@gmail.com'});
 *
 * // result.data.requestPasswordResetEmail contains the boolean response from the API
 * ```
 */
async function requestPasswordResetEmail(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('requestPasswordResetEmail')
        .setMethod('POST')
        .setProps([params, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get customer addresses.
 * Customer must be logged in before calling this method.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getCustomerAddresses | getCustomerAddresses } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getCustomerAddresses | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetCustomerAddressesResponse | GetCustomerAddressesResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch customer addresses if customer is logged in
 * const { data } = await sdk.magento.getCustomerAddresses();
 *
 * // data contains the customer addresses
 * data.customer.addresses; // array of customer addresses
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'get-customer-addresses-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query getCustomerAddresses {
 *                customer {
 *                  addresses {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of data returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   getCustomerAddresses: 'get-customer-addresses-custom-query',
 *   metadata: {
 *     fields: 'city'
 *   }
 * };
 *
 * const { data } = await sdk.magento.getCustomerAddresses({ customQuery });
 *
 * // data contains the customer addresses with only the city field
 * ```
 */
async function getCustomerAddresses(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('getCustomerAddresses')
        .setMethod('POST')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to create a customer address.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomerAddress | createCustomerAddress } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomerAddress | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateCustomerAddressResponse | CreateCustomerAddressResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const address: CustomerAddressInput = {
 *  city: 'some city',
 *  country_code: CountryCodeEnum.Us,
 *  default_billing: false,
 *  default_shipping: false,
 *  firstname: 'John',
 *  lastname: 'Doe',
 *  postcode: '08701',
 *  street: ['street'],
 *  telephone: '123123123',
 *  region: {
 *    region_code: 'NJ',
 *    region_id: 41,
 *    region: 'New Jersey'
 *  }
 * };
 *
 * // customer address will be created for the currently logged in customer
 * await sdk.magento.createCustomerAddress(address);
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'create-customer-address-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation createCustomerAddress($input: CustomerAddressInput!) {
 *                createCustomerAddress(input: $input) {
 *                  ${metadata.fields}
 *                }
 *               }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of data returned by the API
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   createCustomerAddress: 'create-customer-address-custom-query',
 *   metadata: {
 *     fields: 'id city'
 *   }
 * };
 *
 * // address parameter is the same as in the simple usage example
 * const result = await sdk.magento.createCustomerAddress(address, { customQuery });
 *
 * result.data.createCustomerAddress.city; // 'some city'
 * ```
 */
async function createCustomerAddress(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('createCustomerAddress')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to delete a customer address.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/deleteCustomerAddress | deleteCustomerAddress } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/deleteCustomerAddress | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/DeleteCustomerAddressResponse | DeleteCustomerAddressResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const addressId = 12;
 * // customer address will be remove for the currently logged in customer
 * const response = await sdk.magento.deleteCustomerAddress({ id: addressId });
 * // response.data?.deleteCustomerAddress - result is stored here, it's boolean
 * ```
 */
async function deleteCustomerAddress(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('deleteCustomerAddress')
        .setMethod('POST')
        .setProps([params.id, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to update customer data.
 * Customer data is updated based on the current customer token.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomer | updateCustomer } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomer | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCustomerResponse | UpdateCustomerResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Updates customer first name
 * const result = await sdk.magento.updateCustomer({
 *   firstname: 'New John'
 * });
 *
 * // result contains updated customer data
 * console.log(result); // result.data.updateCustomerV2.customer.firstname === 'New John'
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'update-customer-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation updateCustomer($input: CustomerUpdateInput!) {
 *                updateCustomerV2(input: $input) {
 *                  customer {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of data returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   updateCustomer: 'update-customer-custom-query',
 *   metadata: {
 *     fields: 'firstname lastname'
 *   }
 * };
 *
 * const result = await sdk.magento.updateCustomer({
 *   firstname: 'New John'
 *   lastname: 'New Doe'
 * }, { customQuery });
 *
 * // result contains only the fields specified in the custom query
 * // result.data.updateCustomerV2.customer.firstname === 'New John'
 * // result.data.updateCustomerV2.customer.lastname === 'New Doe'
 * console.log(result); // result.data.updateCustomerV2.customer.firstname === 'New John'
 * ```
 */
async function updateCustomer(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('updateCustomer')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to reset customer password.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/resetPassword | resetPassword } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/resetPassword | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ResetPasswordResponse | ResetPasswordResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch resetPassword
 * const await sdk.magento.resetPassword({
 *   email: 'customer.email@gmail.com'
 *   newPassword: 'newPassword',
 *   resetPasswordToken: 'resetPasswordToken' // token obtained from email {@link @vue-storefront/magento-sdk#requestPasswordResetEmail}
 * });
 * ```
 */
async function resetPassword(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('resetPassword')
        .setMethod('POST')
        .setProps([params, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to update customer email
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerEmail | updateCustomerEmail } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerEmail | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCustomerEmailResponse | UpdateCustomerEmailResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // update customer
 * const result = await sdk.magento.updateCustomerEmail({ email: "johndoe@example.com", password: "hunter2" });
 * ```
 *
 * @example
 * Creating a custom GraphQL query for updating customer
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'update-customer-email-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation updateCustomerEmail($email: String!, $password: String!) {
 *                updateCustomerEmail(email: $email, password: $password){
 *                  customer {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to update customer
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   updateCustomerEmail: 'update-customer-email-custom-query',
 *   metadata: {
 *     fields: 'email firstname'
 *   }
 * };
 *
 * const result = await sdk.magento.updateCustomerEmail({ email: "johndoe@example.com", password: "hunter2" }, { customQuery });
 *
 * // Result will contain only the fields specified in the custom query.
 * ```
 */
async function updateCustomerEmail(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('updateCustomerEmail')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch customer reviews
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/reviews | reviews } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/reviews | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/reviewsResponse | reviewsResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch reviews, customer must be logged in
 * const result = await sdk.magento.reviews();
 *
 * // log all reviews
 * result?.data?.customer?.reviews?.items.forEach(review => console.log(review));
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'customer-product-review-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query reviews($pageSize: Int = 10, $currentPage: Int = 1) {
 *                customer {
 *                  reviews(pageSize: $pageSize, currentPage: $currentPage) {
 *                    ${metadata?.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of fields returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * // fetch only text
 *
 * const customQuery = {
 *   reviews: 'customer-product-review-custom-query',
 *   metadata: {
 *     fields: 'items { text }'
 *   }
 * };
 *
 * const result = await sdk.magento.reviews({}, { customQuery });
 *
 * // result will only contain the text of the reviews
 * result?.data?.customer?.reviews?.items.forEach(review => console.log(review.text));
 * ```
 */
async function reviews(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('reviews')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to update customer address
 * The user needs to be logged in in order to send this request
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerAddress | updateCustomerAddress } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerAddress | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCustomerAddressResponse | UpdateCustomerAddressResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch updated customer address
 * const result = await sdk.magento.updateCustomerAddress();
 * ```
 *
 * @example
 * Creating a custom GraphQL query for updating customer address
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'update-customer-address-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation updateCustomerAddress($id: Int!, $input: CustomerAddressInput) {
 *                updateCustomerAddress(id: $id, input: $input) {
 *                  ${metadata.fields}
 *                }
 *              }
 *              `
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to update customer address
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   updateCustomerAddress: 'update-customer-address-custom-query',
 *   metadata: {
 *     fields: 'id city company'
 *   }
 * };
 *
 * const result = await sdk.magento.updateCustomerAddress({ id: 308, input: { city: "Warsaw" }  }, { customQuery });
 *
 * // result will contain only the fields specified in the custom query.
 * ```
 */
async function updateCustomerAddress(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('updateCustomerAddress')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to remove products from wishlist
 * Customer must be logged in to perform this operation. (token in headers)
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeProductsFromWishlist | removeProductsFromWishlist } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeProductsFromWishlist | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RemoveProductsFromWishlistResponse | RemoveProductsFromWishlistResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // remove
 * const result = await sdk.magento.removeProductsFromWishlist({
 *  id: 'some-wishlist-id',
 *  items: ['some-product-id']
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'remove-products-from-wishlist-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              mutation removeProductsFromWishlist($id: ID!, $items: [ID!]!) {
 *                removeProductsFromWishlist(wishlistId: $id, wishlistItemsIds: $items) {
 *                  wishlist {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of data returned by the API
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   removeProductsFromWishlist: 'remove-products-from-wishlist-custom-query',
 *   metadata: {
 *     fields: 'id'
 *   }
 * };
 *
 * const result = await sdk.magento.removeProductsFromWishlist({
 *  id: 'some-wishlist-id',
 *  items: ['item-id-1', 'item-id-2']
 * }, { customQuery });
 *
 * // result should be narrowed to only contain the `id` field
 * ```
 */
async function removeProductsFromWishlist(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('removeProductsFromWishlist')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to count items in the wishlist
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/wishlistItemsCount | wishlistItemsCount } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/wishlist | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/WishlistItemsCountResponse | WishlistItemsCountResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // returns items counter of each wishlist for currently logged in customer
 * const response = await sdk.magento.wishlistItemsCount();
 * // response.data?.customer!.wishlists - array with object containing items counter.
 * // response.data?.customer!.wishlists[X]!.items_count - items_counter for each selected wishlist.
 * // index of element in the array isn't equal wishlist's id in the magento.
 * ```
 */
async function wishlistItemsCount(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('wishlistItemsCount')
        .setMethod('POST')
        .setProps([options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch cms blocks.
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsBlocks | cmsBlocks } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsBlocks | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CmsBlocksResponse | CmsBlocksResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch few cms blocks by their identifiers
 * const { data } = await sdk.magento.cmsBlocks({
 *   identifiers: ['id1', 'id2']
 * });
 *
 * // result will contain cms blocks with the specified identifiers
 * data.cmsBlocks.items.forEach(block => console.log(block.identifier));
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'cms-blocks-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query cmsBlock($identifiers: [String]) {
 *                cmsBlocks(identifiers: $identifiers) {
 *                  items {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of fields returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * // fetch only title
 * const customQuery = {
 *   cmsBlocks: 'cms-blocks-custom-query',
 *   metadata: {
 *     fields: 'title'
 *   }
 * };
 *
 * const { data } = await sdk.magento.cmsBlocks({
 *   identifiers: ['id1', 'id2']
 * }, { customQuery });
 *
 * // data will contain only block titles
 * ```
 */
async function cmsBlocks(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('cmsBlocks')
        .setMethod('GET')
        .setProps([params.identifiers, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch CMS page
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsPage | cmsPage } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsPage | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CmsPageResponse | CmsPageResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch home page by the page identifier
 * const result = await sdk.magento.cmsPage({
 *   identifier: 'home'
 * });
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'cms-page-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query cmsPage($identifier: String) {
 *                cmsPage(identifier:$identifier) {
 *                  ${metadata?.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of fields returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields to only the content and title
 * const customQuery = {
 *   cmsPage: 'cms-page-custom-query',
 *   metadata: {
 *     fields: 'title content'
 *   }
 * };
 *
 * const result = await sdk.magento.cmsPage({
 *   identifier: 'home'
 * }, { customQuery });
 *
 * // result will only contain the title and content fields
 * ```
 */
async function cmsPage(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('cmsPage')
        .setMethod('GET')
        .setProps([params.identifier, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch guest's available shipping methods
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableShippingMethods | getAvailableShippingMethods } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableShippingMethods | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailableShippingMethodsResponse | GetAvailableShippingMethodsResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch guest's available shipping methods
 * const result = await sdk.magento.getAvailableShippingMethods({
 *   cart_id: TEST_CART_ID
 * });
 * // array of available shipping methods for selected shipping address:
 * result.data.cart.shipping_addresses[0].available_shipping_methods[0];
 * ```
 *
 * @example
 * Creating a custom GraphQL query for fetching only what's requested from shipping methods
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'get-available-shipping-methods-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query GuestAvailableShippingMethods($cart_id: String!) {
 *                cart(cart_id:$cart_id) {
 *                  shipping_addresses {
 *                    available_shipping_methods {
 *                      ${metadata.fields}
 *                    }
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch only method_title field
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   shippingMethods: 'get-available-shipping-methods-custom-query',
 *   metadata: {
 *     fields: 'method_title'
 *   }
 * };
 *
 * const result = await sdk.magento.getAvailableShippingMethods({ cart_id: '123'}, { customQuery });
 *
 * // result contains the customer addresses with only the city method_title. Of course, it has same shape as in the "simple usage" example.
 * ```
 */
async function getAvailableShippingMethods(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('getAvailableShippingMethods')
        .setMethod('POST')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get available payment methods for the received guest cart.
 * To get available customer payment methods use {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | getAvailableCustomerPaymentMethods }.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailablePaymentMethods | getAvailablePaymentMethods } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailablePaymentMethods | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailablePaymentMethodsResponse | GetAvailablePaymentMethodsResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch guest available payment methods
 * const result = await sdk.magento.getAvailablePaymentMethods({
 *  cartId: 'masked-cart-id'
 * });
 *
 * // example result
 * {
 *   "data": {
 *     "cart": {
 *       "__typename": "Cart",
 *       "available_payment_methods": [
 *         {
 *           "__typename": "AvailablePaymentMethod",
 *           "code": "checkmo",
 *           "title": "Check / Money order"
 *         }
 *       ]
 *     }
 *   },
 *   "loading": false,
 *   "networkStatus": 7
 * }
 * ```
 */
async function getAvailablePaymentMethods(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('getAvailablePaymentMethods')
        .setMethod('POST')
        .setProps([params.cartId, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch available shipping methods for current customer.
 * Customer must be logged in.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerShippingMethods | getAvailableCustomerShippingMethods } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerShippingMethods | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailableCustomerShippingMethodsResponse | GetAvailableCustomerShippingMethodsResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch available shipping methods for current customer
 * const result = await sdk.magento.getAvailableCustomerShippingMethods();
 * // e.g. output:
 * // {
 * //   "data": {
 * //     "customerCart": {
 * //       "shipping_addresses": [
 * //         address1: {
 * //          "available_shipping_methods": [...]
 * //         },
 * //       ]
 * //     }
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'get-available-customer-shipping-methods-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query CustomerAvailableShippingMethods {
 *                customerCart {
 *                  ${metadata?.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of data returned by the API
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 *
 * const customQuery = {
 *  getAvailableCustomerShippingMethods: 'get-available-customer-shipping-methods-custom-query',
 *  metadata: {
 *    fields: 'shipping_addresses { available_shipping_methods { available method_title } }'
 *  }
 * };
 *
 * const result = await sdk.magento.getAvailableCustomerShippingMethods({ customQuery });
 *
 * // the result will contain only the data defined in the custom query
 * ```
 */
async function getAvailableCustomerShippingMethods(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('getAvailableCustomerShippingMethods')
        .setMethod('POST')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch available payment methods for a logged in customer.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | getAvailableCustomerPaymentMethods } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailableCustomerPaymentMethodsResponse | GetAvailableCustomerPaymentMethodsResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch available payment methods for a logged in customer
 * const result = await sdk.magento.getAvailableCustomerPaymentMethods();
 *
 * // example result
 * {
 *   "data": {
 *     "cart": {
 *       "__typename": "Cart",
 *       "available_payment_methods": [
 *         {
 *           "__typename": "AvailablePaymentMethod",
 *           "code": "checkmo",
 *           "title": "Check / Money order"
 *         }
 *       ]
 *     }
 *   },
 *   "loading": false,
 *   "networkStatus": 7
 * }
 * ```
 */
async function getAvailableCustomerPaymentMethods(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('getAvailableCustomerPaymentMethods')
        .setMethod('POST')
        .setProps([options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to place an order.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/placeOrder | placeOrder } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/placeOrder | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/PlaceOrderResponse | PlaceOrderResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // place an order
 * const result = await sdk.magento.placeOrder({cart_id: 'some-cart-id'});
 *
 * // example result:
 * {
 *   "data": {
 *     "placeOrder": {
 *       "__typename": "PlaceOrderOutput",
 *       "order": {
 *         "__typename": "Order",
 *         "order_number": "000000522"
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * @example
 * The complete flow of placing an order for a guest user:
 *
 * ```ts
 * const emptyCart = await sdk.magento.createEmptyCart(); // create an empty cart
 * const cartId = emptyCart?.data?.createEmptyCart || ''; // get cart id from the response
 *
 * // set guest email on the cart
 * await sdk.magento.setGuestEmailOnCart({ cart_id: cartId, email: 'john.doe+test@vuestorefront.io' });
 *
 * // add products to the cart
 * await sdk.magento.addProductsToCart({
 *   cartId,
 *   cartItems: [
 *     {
 *       quantity: 1,
 *       sku: 'some-sku',
 *       // size and color
 *       selected_options: ['Y29uZmlndXJhYmxlLzkzLzUz', 'Y29uZmlndXJhYmxlLzE0NC8xNzE=']
 *     }
 *   ]
 * });
 *
 * const address = {
 *   firstname: 'John',
 *   lastname: 'Doe',
 *   city: 'New York',
 *   country_code: 'US',
 *   street: ['Street 1', 'Street 2'],
 *   telephone: '123 123 123',
 *   region: 'AL',
 *   postcode: '10001',
 *   save_in_address_book: false
 * }
 *
 * // set shipping and billing address
 * await sdk.magento.setShippingAddressesOnCart({
 *   cart_id: cartId,
 *   shipping_addresses: [{ address }]
 * });
 * await sdk.magento.setBillingAddressOnCart({
 *   cart_id: cartId,
 *   billing_address: { address }
 * });
 *
 * //
 * await sdk.magento.setShippingMethodsOnCart({
 *   cart_id: cartId,
 *   shipping_methods: [{ carrier_code: 'flatrate', method_code: 'flatrate' }]
 * });
 * await sdk.magento.setPaymentMethodOnCart({
 *   cart_id: cartId,
 *   payment_method: { code: 'checkmo' }
 * });
 *
 * // place the order
 * const result = await sdk.magento.placeOrder({ cart_id: cartId });
 */
async function placeOrder(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('placeOrder')
        .setMethod('POST')
        .setProps([params, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch available stores
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/availableStores | availableStores } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/availableStores | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AvailableStoresResponse | AvailableStoresResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch available stores
 * const result = await sdk.magento.availableStores();
 *
 * // result.data.availableStores contains the available stores
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'available-stores-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query availableStores {
 *                availableStores {
 *                  ${metadata?.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of fields returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   availableStores: 'available-stores-custom-query',
 *   metadata: {
 *     fields: 'code store_name'
 *   }
 * };
 *
 * const result = await sdk.magento.availableStores({ customQuery });
 *
 * // result.data.availableStores contains the available stores with only the fields specified in the custom query
 * ```
 */
async function availableStores(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('availableStores')
        .setMethod('GET')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch list of countries
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/countries | countries } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/countries | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CountriesResponse | CountriesResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch list of countries
 * const result = await sdk.magento.countries();
 *
 * // result.data.countries is an array of countries
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'countries-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query countriesList {
 *                countries {
 *                  ${metadata?.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of fields returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   countries: 'countries-custom-query',
 *   metadata: {
 *     fields: 'full_name_english'
 *   }
 * };
 *
 * const result = await sdk.magento.countries({ customQuery });
 *
 * // result.data.countries will only contain the full_name_english field
 * ```
 */
async function countries(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('countries')
        .setMethod('GET')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch available currencies in a store.
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/currency | currency } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/currency | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CurrencyResponse | CurrencyResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch available currencies
 * const result = await sdk.magento.currency();
 *
 * // result would be something like:
 * // {
 * //   "data": {
 * //     "currency": {
 * //       "_currency_code": "EUR",
 * //       "_currency_symbol": "€",
 * //       "default_display_currency_code": "EUR",
 * //       "default_display_currency_symbol": "€",
 * //       "available_currency_codes": [
 * //         "EUR",
 * //         "USD"
 * //       ],
 * //       "exchange_rates": [
 * //         {
 * //           "currency_to": "EUR",
 *  //          "rate": 1
 *  //        },
 *  //        {
 *  //          "currency_to": "USD",
 *  //          "rate": 1.2
 *  //        }
 *  //      ]
 *  //    }
 *  //  }
 *  // }
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'currency-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query currency {
 *                currency{
 *                  ${metadata?.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to fetch a list of currencies with limited number of fields
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   currency: 'currency-custom-query',
 *   metadata: {
 *     fields: '_currency_code'
 *   }
 * };
 *
 * const result = await sdk.magento.currency({ customQuery });
 *
 * // result will contain only the _currency_code field
 * ```
 */
async function currency(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('currency')
        .setMethod('GET')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to create product review
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createProductReview | createProductReview } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createProductReview | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateProductReviewResponse | CreateProductReviewResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // create review data structure
 * const review = {
 *  sku: 'some-sku',
 *  nickname: 'john.doe',
 *  summary: 'awesome thing, whatever it is!',
 *  text: 'this is a test review',
 *  ratings: [{
 *    id: 'NA==', // base64 encoded id
 *    value_id: 'MjA=' // base64 encoded value_id
 *  }]
 * };
 *
 * const result = await sdk.magento.createProductReview(review);
 *
 * // result will contain the created review and summary data
 * ```
 */
async function createProductReview(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('createProductReview')
        .setMethod('POST')
        .setProps([params, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch product reviews
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReview | productReview } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReview | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductReviewResponse | ProductReviewResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch all products reviews (default pagination limit is 10)
 * const result = await sdk.magento.productReview({});
 * ```
 * @example
 * Fetching reviews for a specific product:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * const result = await sdk.magento.productReview({ filter: { sku: { eq: '24-MB01' } );
 * ```
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'product-review-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query productReview($search: String = "", $filter: ProductAttributeFilterInput, $pageSize: Int = 10, $currentPage: Int = 1, $sort: ProductAttributeSortInput) {
 *                products(search: $search, filter: $filter, sort: $sort) {
 *                  items {
 *                    review_count
 *                    reviews(pageSize: $pageSize, currentPage: $currentPage) {
 *                      items {
 *                        ${metadata?.fields}
 *                      }
 *                    }
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to change the amount of fields returned by the query:
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   productReview: 'product-review-custom-query',
 *   metadata: {
 *     fields: 'average_rating'
 *   }
 * };
 *
 * const result = await sdk.magento.productReview({}, { customQuery });
 *
 * // result.data.products.items[0].reviews.items[0] will only contain the average_rating field
 * ```
 */
async function productReview(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('productReview')
        .setMethod('GET')
        .setProps([params, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to get the active ratings attributes and the values each rating can have.
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReviewRatingsMetadata | productReviewRatingsMetadata } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReviewRatingsMetadata | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductReviewRatingsMetadataResponse | ProductReviewRatingsMetadataResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch the active ratings attributes and the values each rating can have
 * const { data } = await sdk.magento.productReviewRatingsMetadata();
 *
 * data.productReviewRatingsMetadata.items; // array of review's attributes
 * data.productReviewRatingsMetadata.items[0].values; // array of possible values of the review's attributes
 * ```
 *
 * @example
 * Creating a custom GraphQL query
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'product-review-ratings-metadata-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query productReviewRatingsMetadata {
 *                productReviewRatingsMetadata {
 *                  items {
 *                    ${metadata.fields}
 *                  }
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to reduce the amount of data returned by the query
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   productReviewRatingsMetadata: 'product-review-ratings-metadata-custom-query',
 *   metadata: {
 *     fields: `
 *      name
 *      values {
 *        value
 *      }
 *     `
 *   }
 * };
 *
 * const { data } = await sdk.magento.productReviewRatingsMetadata({ customQuery });
 *
 * // data.productReviewRatingsMetadata.items[0] will contain only the fields specified in the custom query.
 * ```
 */
async function productReviewRatingsMetadata(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('productReviewRatingsMetadata')
        .setMethod('GET')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to resolve a route object data
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/route | route } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/route | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RouteResponse | RouteResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch route object data
 * const result = await sdk.magento.route({
 *   url: 'aether-gym-pant.html'
 * });
 *
 * // Example result:
 * {
 *    data: {
 *      route: { type: 'PRODUCT', sku: 'MP11', __typename: 'ConfigurableProduct' }
 *    },
 *    loading: false,
 *    networkStatus: 7
 * }
 * ```
 *  * @example
 * Creating a custom GraphQL query to fetch additional data:
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'route-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query route($url: String!) {
 *                route(url: $url) {
 *                  ${metadata?.fields}
 *                }
 *              }
 *            }`
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query created in the previous example.
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   route: 'route-custom-query',
 *   metadata: {
 *     fields: 'type ... on CategoryInterface { uid name image}' // fetch additional name and image fields
 *   }
 * };
 *
 * // data will contain only the fields specified in the custom query.
 * const { data } = await sdk.magento.route({ url: 'women.html' }, { customQuery });
 * ```
 */
async function route(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('route')
        .setMethod('GET')
        .setProps([params.url, options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to fetch store configuration
 *
 * @remarks
 * This method sends a GET request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/storeConfig | storeConfig } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/storeConfig | here}.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/StoreConfigResponse | StoreConfigResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch store configuration
 * const result = await sdk.magento.storeConfig();
 *
 * // result?.data?.storeConfig contains the store configuration
 * ```
 *
 * @example
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         'store-config-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              query storeConfig {
 *                storeConfig {
 *                  ${metadata?.fields}
 *                }
 *              }
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to select only the fields you need
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // we want to fetch only logo related data
 * const customQuery = {
 *   storeConfig: 'store-config-custom-query',
 *   metadata: {
 *     fields: 'logo_alt logo_height logo_width'
 *   }
 * };
 *
 * const result = await sdk.magento.storeConfig({ customQuery });
 * ```
 */
async function storeConfig(options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('storeConfig')
        .setMethod('GET')
        .setProps([options?.customQuery, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method allows guests and registered customers to sign up to receive newsletters.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/subscribeEmailToNewsletter | subscribeEmailToNewsletter } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/subscribeEmailToNewsletter | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SubscribeEmailToNewsletterResponse | SubscribeEmailToNewsletterResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // subscribe an email in the newsletter. * const email = 'somemail@vsf.local';
 * const result = await sdk.magento.subscribeEmailToNewsletter({ email });
 *
 * result.data?.subscribeEmailToNewsletter?.status; // status of the operation. Possible values: https://developer.adobe.com/commerce/webapi/graphql/schema/customer/mutations/subscribe-email-to-newsletter/#subscriptionstatusesenum
 * ```
 */
async function subscribeEmailToNewsletter(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('subscribeEmailToNewsletter')
        .setMethod('POST')
        .setProps([params, options?.customHeaders])
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to send an arbitrary GraphQL query to the Magento GraphQL endpoint
 * For sending mutation, please see {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customMutation | customMutation}.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link @vue-storefront/magento-api#ApiMethods.customQuery | customQuery } endpoint
 * of the Vue Storefront API Middleware.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam RES - Set response type of passed query
 * @typeParam INPUT - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomQueryResponse | CustomQueryResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Do not use gql-tag (gql``) here.
 * // For syntax highlighting (provided by respective IDE extensions), add the `#graphql` comment at the start of the template string
 *
 * const query = `#graphql
 *   query($search: String!) {
 *     products(search: $search) {
 *       items {
 *         name
 *       }
 *     }
 *  }
 * `;
 *
 * const queryVariables: GetProductSearchParams = { search: "t-shirt" };
 *
 * // fetch query response
 * const customQueryResult = await sdk.magento.customQuery<CustomQueryResponse<ProductsListQuery>, CustomQueryInput<GetProductSearchParams>>({
 *   query: query,
 *   queryVariables
 * });
 * ```
 *
 * @example
 * If you want the method to send a GET instead of a POST request,
 * use the `options.clientConfig` parameter.
 *
 * ```ts
 * const customQueryResult = await sdk.magento.customQuery(
 *   {
 *     query,
 *     queryVariables
 *   },
 *   {
 *     clientConfig: {
 *       method: 'GET'
 *     }
 *   }
 * );
 * ```
 */
async function customQuery(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('customQuery')
        .setMethod('POST')
        .setProps({ ...params, customHeaders: options?.customHeaders })
        .setConfig(options?.clientConfig)
        .send();
}

/**
 * Method to send an arbitrary GraphQL mutation to the Magento GraphQL endpoint
 * For sending query, please see {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customQuery | customQuery}.
 *
 * @remarks
 * This method sends a POST request to the
 * {@link @vue-storefront/magento-api#ApiMethods.customMutation | customMutation } endpoint
 * of the Vue Storefront API Middleware.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam RES - Set response type of passed query
 * @typeParam INPUT - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomQueryResponse | CustomQueryResponse}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // Prepare custom mutation
 * // Do not use gql-tag (gql``) here.
 * // For syntax highlighting (provided by respective IDE extensions), add the `#graphql` comment at the start of the template string
 * const mutation = `#graphql
 *  mutation generateCustomerToken($email: String!, $password: String!) {
 *    generateCustomerToken(email: $email, password: $password) {
 *      token
 *    }
 *  }
 *`;
 *
 * // Prepare mutation variables
 * const mutationVariables: GenerateCustomerTokenInput = {
 *  email: TEST_USER_EMAIL,
 *  password: TEST_USER_PASSWORD
 * };
 *
 * // use custom mutation and variables to fetch response adjusted to your needs
 * const result = await sdk.magento.customMutation<CustomMutationResponse<GenerateCustomerTokenMutation>, CustomMutationInput<GenerateCustomerTokenInput>>({
 *  mutation,
 *  mutationVariables
 * });
 * ```
 */
async function customMutation(params, options) {
    return new sdkAxiosRequestSender.AxiosRequestSender(client)
        .setUrl('customMutation')
        .setMethod('POST')
        .setProps({ ...params, customHeaders: options?.customHeaders })
        .setConfig(options?.clientConfig)
        .send();
}

var methods = /*#__PURE__*/Object.freeze({
  __proto__: null,
  applyCouponToCart: applyCouponToCart,
  productDetails: productDetails,
  categories: categories,
  categoryList: categoryList,
  categorySearch: categorySearch,
  products: products,
  relatedProducts: relatedProducts,
  upsellProducts: upsellProducts,
  addProductToWishList: addProductToWishList,
  cart: cart,
  cartTotalQty: cartTotalQty,
  setGuestEmailOnCart: setGuestEmailOnCart,
  createEmptyCart: createEmptyCart,
  setShippingAddressesOnCart: setShippingAddressesOnCart,
  removeCouponFromCart: removeCouponFromCart,
  addProductsToCart: addProductsToCart,
  addConfigurableProductsToCart: addConfigurableProductsToCart,
  addBundleProductsToCart: addBundleProductsToCart,
  setBillingAddressOnCart: setBillingAddressOnCart,
  setShippingMethodsOnCart: setShippingMethodsOnCart,
  removeItemFromCart: removeItemFromCart,
  setPaymentMethodOnCart: setPaymentMethodOnCart,
  mergeCarts: mergeCarts,
  updateCartItems: updateCartItems,
  createCustomer: createCustomer,
  customer: customer,
  changeCustomerPassword: changeCustomerPassword,
  generateCustomerToken: generateCustomerToken,
  customerCart: customerCart,
  revokeCustomerToken: revokeCustomerToken,
  requestPasswordResetEmail: requestPasswordResetEmail,
  getCustomerAddresses: getCustomerAddresses,
  createCustomerAddress: createCustomerAddress,
  deleteCustomerAddress: deleteCustomerAddress,
  updateCustomer: updateCustomer,
  resetPassword: resetPassword,
  updateCustomerEmail: updateCustomerEmail,
  reviews: reviews,
  updateCustomerAddress: updateCustomerAddress,
  removeProductsFromWishlist: removeProductsFromWishlist,
  wishlistItemsCount: wishlistItemsCount,
  cmsBlocks: cmsBlocks,
  cmsPage: cmsPage,
  getAvailableShippingMethods: getAvailableShippingMethods,
  getAvailablePaymentMethods: getAvailablePaymentMethods,
  getAvailableCustomerShippingMethods: getAvailableCustomerShippingMethods,
  getAvailableCustomerPaymentMethods: getAvailableCustomerPaymentMethods,
  placeOrder: placeOrder,
  availableStores: availableStores,
  countries: countries,
  currency: currency,
  createProductReview: createProductReview,
  productReview: productReview,
  productReviewRatingsMetadata: productReviewRatingsMetadata,
  route: route,
  storeConfig: storeConfig,
  subscribeEmailToNewsletter: subscribeEmailToNewsletter,
  customQuery: customQuery,
  customMutation: customMutation
});

const connector = (options) => {
    sdkContext.set('apiUrl', options.apiUrl);
    return methods;
};

/**
 * Magento module.
 *
 * @deprecated
 *
 * Use `middlewareModule` instead.
 *
 * ```diff
 * - import { initSDK, buildModule } from '@vue-storefront/sdk';
 * - import { magentoModule } from '@vsf-enterprise/magento-sdk'
 * + import { initSDK, buildModule, middlewareModule } from '@vue-storefront/sdk';
 * + import { Endpoints as MagentoEndpoints } from '@vsf-enterprise/magento-api';
 *
 * const sdkConfig = {
 *   magneto:
 *     buildModule(
 * -      magentoModule,
 * +      middlewareModule<MagentoEndpoints>,
 *       { apiUrl: 'http://localhost:8181/magneto' }
 *     )
 * };
 *
 * export const sdk = initSDK(sdkConfig);
 *
 * // Breaking changes:
 * // - Custom queries are now a second argument of the methods.
 *
 * const customQuery = {
 *   cart: 'cart-custom-query',
 *   metadata: {
 *     fields: 'id items { uid }'
 *   }
 * };
 * - const cart = await sdk.magento.cart({ cartId: '123'}, { customQuery });
 * + const cart = await sdk.magento.cart({ cartId: '123'}, customQuery);
 *
 * ```
 *
 * @example
 * Initialization of the Magento module.
 *
 * ```js
 * import { initSDK, buildModule } from '@vue-storefront/sdk';
 * import { magentoModule, MagentoModuleType } from '@vue-storefront/magento2-sdk'
 *
 * const sdkConfig = {
 *   magento:
 *     buildModule(
 *       magentoModule,
 *       {
 *         apiUrl: 'http://localhost:8181/magento',
 *       }
 *     )
 * };
 *
 * export const sdk = initSDK<typeof sdkConfig>(sdkConfig);
 * ```
 */
const magentoModule = (options) => {
    return {
        connector: connector(options),
    };
};

exports.client = client;
exports.magentoModule = magentoModule;
//# sourceMappingURL=index.cjs.js.map
