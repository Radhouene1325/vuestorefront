import type { AxiosInstance, AxiosRequestConfig } from "axios";
import type { AllowedMethods, CustomErrorHandler } from "../../types";
/**
 * Class providing a simplified API for sending HTTP requests
 * in Vue Storefront SDK methods.
 *
 * @remarks
 * For the nonce, the class only allows sending POST or GET
 * requests. Its main purpose is to abstract away the
 * logic behind passing SDK method props to the request
 * (i.e. as a request body or query parameters).
 *
 * It also silently falls back to `POST` in case the `GET`
 * request throws the `414 URI Too Long` error. The behaviour
 * can be customized by using a custom error handler.
 *
 * @example
 * Using the class in a Vue Storefront SDK method:
 *
 * ```ts
 * import { client } from '../client';
 * import { AxiosRequestSender } from '@vue-storefront/sdk-axios-request-sender';
 *
 * export async function getCategory<Res>(props, options): Promise<Res> {
 *   return new AxiosRequestSender(client)
 *     .setUrl("getCategory")
 *     .setMethod("GET")
 *     .setProps(props)
 *     .setConfig(options?.axiosRequestConfig)
 *     .setErrorHandler((error) => throw error)
 *     .send<Res>();
 * }
 * ```
 */
export declare class AxiosRequestSender {
    private readonly client;
    private config;
    private props;
    private url;
    private method;
    constructor(client: AxiosInstance);
    /**
     * Method injecting user-defined
     * configuration (coming from outside the SDK method)
     * into the request.
     */
    setConfig(config: AxiosRequestConfig): this;
    /**
     * Method setting request URL. It can be either a full
     * URL or - in case the client already has the `baseURL`
     * set - just a path.
     */
    setUrl(url: string): this;
    /**
     * Method passing props to the request. Depending on
     * the HTTP method, they will be sent as either a
     * request body or the "body" query parameter (expected
     * by Vue Storefront's Server Middleware).
     */
    setProps(props: unknown): this;
    /**
     * Method setting the HTTP method to use for the request.
     * If not used, the default method is `POST`.
     */
    setMethod(method: AllowedMethods): this;
    /**
     * Method customizing the error handler. The default one
     * - in case the request method is `GET` and the error has
     * the 414 code (URI Too Long) - re-sends the request as
     * `POST`. In other cases, it simply re-throws the original error.
     */
    setErrorHandler(handler: CustomErrorHandler): this;
    /**
     * Method sending the HTTP request.
     */
    send<Res>(): Promise<Res>;
    /**
     * HTTP GET request handler.
     */
    private GET;
    /**
     * HTTP POST request handler.
     */
    private POST;
    /**
     * The default error handler.
     */
    private handleError;
}
//# sourceMappingURL=requestSender.d.ts.map